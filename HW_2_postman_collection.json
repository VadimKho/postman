{
	"info": {
		"_postman_id": "b4ecc085-dccd-427c-bad9-8483dfe406f3",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статус кода (200)\r",
							"pm.test(\"проверка статус кода (200)\", function() {\r",
							"    pm.expect(pm.response).to.have.status(200)\r",
							"});\r",
							"// проверим что в body приходит правильный string\r",
							"pm.test(\"проверка ответа\", function() {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статус кода (200)\r",
							"pm.test(\"проверка статус кода (200)\", function() {\r",
							"pm.expect(pm.response).to.have.status(200)\r",
							"});\r",
							"// спарсим response body в json\r",
							"var answer = pm.response.json();\r",
							"// проверим что name равно name с request\r",
							"pm.test(\"check name\", function() {\r",
							"    //var answer = pm.response.json();\r",
							"    pm.expect(answer.name).to.eql(\"vadim\");\r",
							"});\r",
							"// проверим что age равно age с request\r",
							"pm.test(\"check age\", function() {\r",
							"    //var answer = pm.response.json();\r",
							"    pm.expect(answer.age).to.eql(\"31\");\r",
							"});\r",
							"// проверим что salary равно salary с request\r",
							"pm.test(\"check salary\", function() {\r",
							"    //var answer = pm.response.json();\r",
							"    pm.expect(answer.salary).to.eql(350)\r",
							"});\r",
							"// спарсить request\r",
							"var reqBoby = request.data;\r",
							"console.log(reqBoby);\r",
							"\r",
							"// что name в ответе равно name c request\r",
							"pm.test(\"проверка name в ответе равно name в запросе\", function(){\r",
							"    //var reqBoby = request.data;\r",
							"    pm.expect(reqBoby.name).to.eql(answer.name);\r",
							"});\r",
							"// проверить что age в ответе равно age c request\r",
							"pm.test(\"проверить age из ответа равно age с request\", function(){\r",
							"    //var reqBody = request.data;\r",
							"    pm.expect(reqBoby.age).to.eql(answer.age);\r",
							"});\r",
							"// проверить что salary в ответе равно salary с request\r",
							"pm.test(\"проверить salary из ответа равно salary с request\", function() {\r",
							"    var reqBody = request.data;\r",
							"    pm.expect(parseInt(reqBody.salary)).to.eql(answer.salary);\r",
							"});\r",
							"\r",
							"// вывести в консоль параметр family\r",
							"console.log(answer[\"family\"]);\r",
							"\r",
							"// проверить что u_salary_1_5_year в ответе равно salary*4\r",
							"pm.test(\"проверить что u_salary_1_5_year в ответе равно salary*4\", function() {\r",
							"    //var answer = pm.response.json;\r",
							"    //var reqBoby = request.data;\r",
							"    pm.expect(answer.family.u_salary_1_5_year).to.eql(reqBoby.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "name",
						"value": "vadim",
						"type": "text",
						"disabled": true
					},
					{
						"key": "age",
						"value": "31",
						"type": "text",
						"disabled": true
					},
					{
						"key": "salary",
						"value": "350",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vadim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "350",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статус кода (200)\r",
							"pm.test(\"проверка статус кода (200)\", function() {\r",
							"    pm.expect(pm.response).to.have.status(200)\r",
							"});\r",
							"// спарсить sesponse body в json\r",
							"var answer = pm.response.json();\r",
							"// console.log(answer)\r",
							"// спарсит request\r",
							"var reqBody = pm.request.url;\r",
							"console.log(reqBody);\r",
							"\r",
							"//  Проверить, что name в ответе равно name s request \r",
							"pm.test(\"check name\", function() {\r",
							"    pm.expect(pm.response.name).to.eql(reqBody.query[0])\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request \r",
							"pm.test(\"check age\", function() {\r",
							"    pm.expect(pm.response.age).to.eql(reqBody.query[1])\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"check salary\", function() {\r",
							"    pm.expect(pm.response.salary).to.eql(reqBody.query[2])\r",
							"});\r",
							" // Вывести в консоль параметр family из response\r",
							" console.log(answer.family)\r",
							" // Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"check param\", function() {\r",
							"    pm.expect(answer.family.pets.dog).to.have.any.keys(\"name\");\r",
							"});\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"// console.log(answer.family.pets.dog.age)\r",
							"pm.test(\"check param dog age\", function() {\r",
							"    pm.expect(answer.family.pets.dog).to.have.any.keys(\"age\");\r",
							"});\r",
							"//  Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"check name Lucky\", function() {\r",
							"    pm.expect(answer.family.pets.dog.name).to.eql(\"Luky\");\r",
							"})\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"check age number\", function() {\r",
							"    pm.expect(answer.family.pets.dog.age).to.eql(4);\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=vadim&age=31&salary=350",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "vadim"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "350"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"pm.test(\"check status code\", function() {\r",
							"    pm.expect(pm.response).to.have.status(200)\r",
							"});\r",
							"//Спарсить response body в json\r",
							"var answer = pm.response.json()\r",
							"//console.log(answer)\r",
							"// Спарсить request\r",
							"\r",
							"var reqBody = pm.request.url\r",
							"//console.log(reqBody)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request\r",
							"pm.test(\"check name\", function() {\r",
							"    pm.expect(pm.response.name).to.eql(reqBody.query[0])\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request \r",
							"pm.test(\"check age\", function() {\r",
							"    pm.expect(pm.response.age).to.eql(reqBody.query[0])\r",
							"});\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log(reqBody.query.get(\"salary\"))\r",
							"// Вывести в консоль параметр salary из response\r",
							"console.log(answer.salary)\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(answer.salary[0])\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(answer.salary[1])\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(answer.salary[2])\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request\r",
							"pm.test(\"check param salary\", function() {\r",
							"    pm.expect(answer.salary[0]).to.eql(+reqBody.query.get(\"salary\"))\r",
							"})\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check first param\", function() {\r",
							"    pm.expect(+answer.salary[1]).to.eql(reqBody.query.get(\"salary\")*2)\r",
							"})\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request\r",
							"pm.test(\"check second param\", function () {\r",
							"    pm.expect(+answer.salary[2]).to.eql(reqBody.query.get(\"salary\")*3)\r",
							"})\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"pm.environment.set(\"name\", answer.name)\r",
							"pm.environment.set(\"age\", answer.age)\r",
							"pm.environment.set(\"salary\", answer.salary[0])\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary \r",
							"var ee = answer.salary;\r",
							" for (var  i = 0; ee.length < 2; i++) {\r",
							" console.log(ee[i])}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=vadim&age=31&salary=350",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "vadim"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "350"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"status code\", function() {\r",
							"    pm.expect(pm.response).to.have.status(200)\r",
							"})\r",
							"//Спарсить response body в json.\r",
							"var answer = pm.response.json()\r",
							"//console.log(answer)\r",
							"// Спарсить request\r",
							"var reqBody = request.data\r",
							"// console.log(reqBody)\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check paramstart_qa_salary\", function() {\r",
							"    pm.expect(answer).to.have.any.keys(\"start_qa_salary\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check param qa_salary_after_6_months\", function() {\r",
							"    pm.expect(answer).to.have.any.keys(\"qa_salary_after_6_months\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check param qa_salary_after_12_months\", function() {\r",
							"    pm.expect(answer).to.have.any.keys(\"qa_salary_after_12_months\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check param qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(answer).to.have.any.keys(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check param qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(answer).to.have.any.keys(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"check param person\", function() {\r",
							"    pm.expect(answer).to.have.any.keys(\"person\")\r",
							"})\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"start_qa_salary eql salary из request\", function() {\r",
							"    pm.expect(answer.start_qa_salary).to.eql(+reqBody.salary)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months eql salary*2\", function() {\r",
							"    pm.expect(answer.qa_salary_after_6_months).to.eql(reqBody.salary*2)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months eql salary*2.7\", function() {\r",
							"    pm.expect(answer.qa_salary_after_12_months).to.eql(reqBody.salary*2.7)\r",
							"})\r",
							"//  Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							" pm.test(\"qa_salary_after_1.5_yeareql salary*3.3\", function() {\r",
							"     pm.expect(answer[\"qa_salary_after_1.5_year\"]).to.eql(reqBody.salary*3.3)\r",
							" })\r",
							"\r",
							" // Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_3.5_years eql salary*3.8\", function() {\r",
							"     pm.expect(answer[\"qa_salary_after_3.5_years\"]).to.eql(reqBody.salary*3.8)\r",
							" })\r",
							" // Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							" pm.test(\"person first param \", function() {\r",
							"     pm.expect(answer.person.u_name[1]).to.eql(+reqBody.salary)\r",
							" })\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age param \", function() {\r",
							"     pm.expect(answer.person.u_age).to.eql(+reqBody.age)\r",
							" })\r",
							" //Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							" pm.test(\"u_salary_5_years param \", function() {\r",
							"     pm.expect(answer.person.u_salary_5_years).to.eql(reqBody.salary*4.2)\r",
							" })\r",
							" //***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" //console.log(Object.keys(answer.person).length)\r",
							"  for (var i = 0; i < Object.keys(answer.person).length; i++)  {\r",
							" console.log(Object.keys(answer.person)[i])\r",
							"   }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}
